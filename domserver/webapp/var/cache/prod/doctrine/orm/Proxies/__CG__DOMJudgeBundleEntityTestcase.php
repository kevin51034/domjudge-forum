<?php

namespace Proxies\__CG__\DOMJudgeBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Testcase extends \DOMJudgeBundle\Entity\Testcase implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'testcaseid', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'md5sum_input', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'md5sum_output', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'input', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'output', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'probid', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'rank', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'description', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'image', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'image_thumb', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'image_type', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'sample', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'judging_runs', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'problem'];
        }

        return ['__isInitialized__', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'testcaseid', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'md5sum_input', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'md5sum_output', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'input', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'output', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'probid', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'rank', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'description', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'image', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'image_thumb', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'image_type', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'sample', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'judging_runs', '' . "\0" . 'DOMJudgeBundle\\Entity\\Testcase' . "\0" . 'problem'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Testcase $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getTestcaseid()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getTestcaseid();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTestcaseid', []);

        return parent::getTestcaseid();
    }

    /**
     * {@inheritDoc}
     */
    public function setMd5sumInput($md5sumInput)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMd5sumInput', [$md5sumInput]);

        return parent::setMd5sumInput($md5sumInput);
    }

    /**
     * {@inheritDoc}
     */
    public function getMd5sumInput()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMd5sumInput', []);

        return parent::getMd5sumInput();
    }

    /**
     * {@inheritDoc}
     */
    public function setMd5sumOutput($md5sumOutput)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMd5sumOutput', [$md5sumOutput]);

        return parent::setMd5sumOutput($md5sumOutput);
    }

    /**
     * {@inheritDoc}
     */
    public function getMd5sumOutput()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMd5sumOutput', []);

        return parent::getMd5sumOutput();
    }

    /**
     * {@inheritDoc}
     */
    public function setInput($input)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInput', [$input]);

        return parent::setInput($input);
    }

    /**
     * {@inheritDoc}
     */
    public function getInput()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInput', []);

        return parent::getInput();
    }

    /**
     * {@inheritDoc}
     */
    public function setOutput($output)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOutput', [$output]);

        return parent::setOutput($output);
    }

    /**
     * {@inheritDoc}
     */
    public function getOutput()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOutput', []);

        return parent::getOutput();
    }

    /**
     * {@inheritDoc}
     */
    public function setProbid($probid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProbid', [$probid]);

        return parent::setProbid($probid);
    }

    /**
     * {@inheritDoc}
     */
    public function getProbid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProbid', []);

        return parent::getProbid();
    }

    /**
     * {@inheritDoc}
     */
    public function setRank($rank)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRank', [$rank]);

        return parent::setRank($rank);
    }

    /**
     * {@inheritDoc}
     */
    public function getRank()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRank', []);

        return parent::getRank();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setImage($image)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImage', [$image]);

        return parent::setImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function getImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage', []);

        return parent::getImage();
    }

    /**
     * {@inheritDoc}
     */
    public function setImageThumb($imageThumb)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImageThumb', [$imageThumb]);

        return parent::setImageThumb($imageThumb);
    }

    /**
     * {@inheritDoc}
     */
    public function getImageThumb()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImageThumb', []);

        return parent::getImageThumb();
    }

    /**
     * {@inheritDoc}
     */
    public function setImageType($imageType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImageType', [$imageType]);

        return parent::setImageType($imageType);
    }

    /**
     * {@inheritDoc}
     */
    public function getImageType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImageType', []);

        return parent::getImageType();
    }

    /**
     * {@inheritDoc}
     */
    public function setSample($sample)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSample', [$sample]);

        return parent::setSample($sample);
    }

    /**
     * {@inheritDoc}
     */
    public function getSample()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSample', []);

        return parent::getSample();
    }

    /**
     * {@inheritDoc}
     */
    public function addJudgingRun(\DOMJudgeBundle\Entity\JudgingRun $judgingRun)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addJudgingRun', [$judgingRun]);

        return parent::addJudgingRun($judgingRun);
    }

    /**
     * {@inheritDoc}
     */
    public function removeJudgingRun(\DOMJudgeBundle\Entity\JudgingRun $judgingRun)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeJudgingRun', [$judgingRun]);

        return parent::removeJudgingRun($judgingRun);
    }

    /**
     * {@inheritDoc}
     */
    public function getJudgingRuns()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJudgingRuns', []);

        return parent::getJudgingRuns();
    }

    /**
     * {@inheritDoc}
     */
    public function setProblem(\DOMJudgeBundle\Entity\Problem $problem = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProblem', [$problem]);

        return parent::setProblem($problem);
    }

    /**
     * {@inheritDoc}
     */
    public function getProblem()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProblem', []);

        return parent::getProblem();
    }

}
