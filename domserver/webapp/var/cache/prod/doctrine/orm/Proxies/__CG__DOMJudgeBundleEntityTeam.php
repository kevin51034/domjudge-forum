<?php

namespace Proxies\__CG__\DOMJudgeBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Team extends \DOMJudgeBundle\Entity\Team implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'teamid', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'externalid', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'name', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'categoryid', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'affilid', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'enabled', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'members', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'room', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'comments', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'judging_last_started', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'teampage_first_visited', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'hostname', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'penalty', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'affiliation', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'category', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'contests', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'users', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'submissions', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'sent_clarifications', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'received_clarifications', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'unread_clarifications', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'scorecache', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'rankcache'];
        }

        return ['__isInitialized__', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'teamid', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'externalid', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'name', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'categoryid', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'affilid', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'enabled', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'members', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'room', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'comments', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'judging_last_started', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'teampage_first_visited', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'hostname', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'penalty', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'affiliation', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'category', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'contests', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'users', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'submissions', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'sent_clarifications', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'received_clarifications', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'unread_clarifications', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'scorecache', '' . "\0" . 'DOMJudgeBundle\\Entity\\Team' . "\0" . 'rankcache'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Team $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getTeamid()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getTeamid();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTeamid', []);

        return parent::getTeamid();
    }

    /**
     * {@inheritDoc}
     */
    public function setExternalid($externalid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExternalid', [$externalid]);

        return parent::setExternalid($externalid);
    }

    /**
     * {@inheritDoc}
     */
    public function getExternalid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExternalid', []);

        return parent::getExternalid();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategoryid($categoryid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategoryid', [$categoryid]);

        return parent::setCategoryid($categoryid);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategoryid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategoryid', []);

        return parent::getCategoryid();
    }

    /**
     * {@inheritDoc}
     */
    public function setAffilid($affilid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAffilid', [$affilid]);

        return parent::setAffilid($affilid);
    }

    /**
     * {@inheritDoc}
     */
    public function getAffilid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAffilid', []);

        return parent::getAffilid();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnabled($enabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnabled', [$enabled]);

        return parent::setEnabled($enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEnabled', []);

        return parent::getEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setMembers($members)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMembers', [$members]);

        return parent::setMembers($members);
    }

    /**
     * {@inheritDoc}
     */
    public function getMembers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMembers', []);

        return parent::getMembers();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoom($room)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoom', [$room]);

        return parent::setRoom($room);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoom', []);

        return parent::getRoom();
    }

    /**
     * {@inheritDoc}
     */
    public function setComments($comments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setComments', [$comments]);

        return parent::setComments($comments);
    }

    /**
     * {@inheritDoc}
     */
    public function getComments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComments', []);

        return parent::getComments();
    }

    /**
     * {@inheritDoc}
     */
    public function setJudgingLastStarted($judgingLastStarted)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setJudgingLastStarted', [$judgingLastStarted]);

        return parent::setJudgingLastStarted($judgingLastStarted);
    }

    /**
     * {@inheritDoc}
     */
    public function getJudgingLastStarted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJudgingLastStarted', []);

        return parent::getJudgingLastStarted();
    }

    /**
     * {@inheritDoc}
     */
    public function setTeampageFirstVisited($teampageFirstVisited)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTeampageFirstVisited', [$teampageFirstVisited]);

        return parent::setTeampageFirstVisited($teampageFirstVisited);
    }

    /**
     * {@inheritDoc}
     */
    public function getTeampageFirstVisited()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTeampageFirstVisited', []);

        return parent::getTeampageFirstVisited();
    }

    /**
     * {@inheritDoc}
     */
    public function setHostname($hostname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHostname', [$hostname]);

        return parent::setHostname($hostname);
    }

    /**
     * {@inheritDoc}
     */
    public function getHostname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHostname', []);

        return parent::getHostname();
    }

    /**
     * {@inheritDoc}
     */
    public function setPenalty($penalty)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPenalty', [$penalty]);

        return parent::setPenalty($penalty);
    }

    /**
     * {@inheritDoc}
     */
    public function getPenalty()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPenalty', []);

        return parent::getPenalty();
    }

    /**
     * {@inheritDoc}
     */
    public function setAffiliation(\DOMJudgeBundle\Entity\TeamAffiliation $affiliation = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAffiliation', [$affiliation]);

        return parent::setAffiliation($affiliation);
    }

    /**
     * {@inheritDoc}
     */
    public function getAffiliation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAffiliation', []);

        return parent::getAffiliation();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategory(\DOMJudgeBundle\Entity\TeamCategory $category = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategory', [$category]);

        return parent::setCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategory', []);

        return parent::getCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function addContest(\DOMJudgeBundle\Entity\Contest $contest)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addContest', [$contest]);

        return parent::addContest($contest);
    }

    /**
     * {@inheritDoc}
     */
    public function removeContest(\DOMJudgeBundle\Entity\Contest $contest)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeContest', [$contest]);

        return parent::removeContest($contest);
    }

    /**
     * {@inheritDoc}
     */
    public function getContests()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContests', []);

        return parent::getContests();
    }

    /**
     * {@inheritDoc}
     */
    public function addUser(\DOMJudgeBundle\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUser', [$user]);

        return parent::addUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUser(\DOMJudgeBundle\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUser', [$user]);

        return parent::removeUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsers', []);

        return parent::getUsers();
    }

    /**
     * {@inheritDoc}
     */
    public function addSubmission(\DOMJudgeBundle\Entity\Submission $submission)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSubmission', [$submission]);

        return parent::addSubmission($submission);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSubmission(\DOMJudgeBundle\Entity\Submission $submission)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSubmission', [$submission]);

        return parent::removeSubmission($submission);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubmissions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubmissions', []);

        return parent::getSubmissions();
    }

    /**
     * {@inheritDoc}
     */
    public function addSentClarification(\DOMJudgeBundle\Entity\Clarification $sentClarification)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSentClarification', [$sentClarification]);

        return parent::addSentClarification($sentClarification);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSentClarification(\DOMJudgeBundle\Entity\Clarification $sentClarification)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSentClarification', [$sentClarification]);

        return parent::removeSentClarification($sentClarification);
    }

    /**
     * {@inheritDoc}
     */
    public function getSentClarifications()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSentClarifications', []);

        return parent::getSentClarifications();
    }

    /**
     * {@inheritDoc}
     */
    public function addReceivedClarification(\DOMJudgeBundle\Entity\Clarification $receivedClarification)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addReceivedClarification', [$receivedClarification]);

        return parent::addReceivedClarification($receivedClarification);
    }

    /**
     * {@inheritDoc}
     */
    public function removeReceivedClarification(\DOMJudgeBundle\Entity\Clarification $receivedClarification)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeReceivedClarification', [$receivedClarification]);

        return parent::removeReceivedClarification($receivedClarification);
    }

    /**
     * {@inheritDoc}
     */
    public function getReceivedClarifications()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReceivedClarifications', []);

        return parent::getReceivedClarifications();
    }

    /**
     * {@inheritDoc}
     */
    public function addUnreadClarification(\DOMJudgeBundle\Entity\Clarification $unreadClarification)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUnreadClarification', [$unreadClarification]);

        return parent::addUnreadClarification($unreadClarification);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUnreadClarification(\DOMJudgeBundle\Entity\Clarification $unreadClarification)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUnreadClarification', [$unreadClarification]);

        return parent::removeUnreadClarification($unreadClarification);
    }

    /**
     * {@inheritDoc}
     */
    public function getUnreadClarifications()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnreadClarifications', []);

        return parent::getUnreadClarifications();
    }

    /**
     * {@inheritDoc}
     */
    public function addScorecache(\DOMJudgeBundle\Entity\ScoreCache $scorecache)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addScorecache', [$scorecache]);

        return parent::addScorecache($scorecache);
    }

    /**
     * {@inheritDoc}
     */
    public function removeScorecache(\DOMJudgeBundle\Entity\ScoreCache $scorecache)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeScorecache', [$scorecache]);

        return parent::removeScorecache($scorecache);
    }

    /**
     * {@inheritDoc}
     */
    public function getScorecache()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getScorecache', []);

        return parent::getScorecache();
    }

    /**
     * {@inheritDoc}
     */
    public function addRankcache(\DOMJudgeBundle\Entity\RankCache $rankcache)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRankcache', [$rankcache]);

        return parent::addRankcache($rankcache);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRankcache(\DOMJudgeBundle\Entity\RankCache $rankcache)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRankcache', [$rankcache]);

        return parent::removeRankcache($rankcache);
    }

    /**
     * {@inheritDoc}
     */
    public function getRankcache()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRankcache', []);

        return parent::getRankcache();
    }

}
