<?php

namespace Proxies\__CG__\DOMJudgeBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class JudgingRun extends \DOMJudgeBundle\Entity\JudgingRun implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'runid', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'judgingid', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'testcaseid', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'runresult', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'runtime', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'endtime', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'output_run', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'output_diff', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'output_error', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'output_system', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'judging', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'testcase'];
        }

        return ['__isInitialized__', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'runid', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'judgingid', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'testcaseid', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'runresult', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'runtime', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'endtime', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'output_run', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'output_diff', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'output_error', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'output_system', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'judging', '' . "\0" . 'DOMJudgeBundle\\Entity\\JudgingRun' . "\0" . 'testcase'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (JudgingRun $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getRunid()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getRunid();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRunid', []);

        return parent::getRunid();
    }

    /**
     * {@inheritDoc}
     */
    public function setJudgingid($judgingid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setJudgingid', [$judgingid]);

        return parent::setJudgingid($judgingid);
    }

    /**
     * {@inheritDoc}
     */
    public function getJudgingid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJudgingid', []);

        return parent::getJudgingid();
    }

    /**
     * {@inheritDoc}
     */
    public function setTestcaseid($testcaseid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTestcaseid', [$testcaseid]);

        return parent::setTestcaseid($testcaseid);
    }

    /**
     * {@inheritDoc}
     */
    public function getTestcaseid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTestcaseid', []);

        return parent::getTestcaseid();
    }

    /**
     * {@inheritDoc}
     */
    public function setRunresult($runresult)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRunresult', [$runresult]);

        return parent::setRunresult($runresult);
    }

    /**
     * {@inheritDoc}
     */
    public function getRunresult()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRunresult', []);

        return parent::getRunresult();
    }

    /**
     * {@inheritDoc}
     */
    public function setRuntime($runtime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRuntime', [$runtime]);

        return parent::setRuntime($runtime);
    }

    /**
     * {@inheritDoc}
     */
    public function getRuntime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRuntime', []);

        return parent::getRuntime();
    }

    /**
     * {@inheritDoc}
     */
    public function setOutputRun($outputRun)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOutputRun', [$outputRun]);

        return parent::setOutputRun($outputRun);
    }

    /**
     * {@inheritDoc}
     */
    public function getOutputRun()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOutputRun', []);

        return parent::getOutputRun();
    }

    /**
     * {@inheritDoc}
     */
    public function setOutputDiff($outputDiff)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOutputDiff', [$outputDiff]);

        return parent::setOutputDiff($outputDiff);
    }

    /**
     * {@inheritDoc}
     */
    public function getOutputDiff()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOutputDiff', []);

        return parent::getOutputDiff();
    }

    /**
     * {@inheritDoc}
     */
    public function setOutputError($outputError)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOutputError', [$outputError]);

        return parent::setOutputError($outputError);
    }

    /**
     * {@inheritDoc}
     */
    public function getOutputError()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOutputError', []);

        return parent::getOutputError();
    }

    /**
     * {@inheritDoc}
     */
    public function setOutputSystem($outputSystem)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOutputSystem', [$outputSystem]);

        return parent::setOutputSystem($outputSystem);
    }

    /**
     * {@inheritDoc}
     */
    public function getOutputSystem()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOutputSystem', []);

        return parent::getOutputSystem();
    }

    /**
     * {@inheritDoc}
     */
    public function setJudging(\DOMJudgeBundle\Entity\Judging $judging = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setJudging', [$judging]);

        return parent::setJudging($judging);
    }

    /**
     * {@inheritDoc}
     */
    public function getJudging()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJudging', []);

        return parent::getJudging();
    }

    /**
     * {@inheritDoc}
     */
    public function setTestcase(\DOMJudgeBundle\Entity\Testcase $testcase = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTestcase', [$testcase]);

        return parent::setTestcase($testcase);
    }

    /**
     * {@inheritDoc}
     */
    public function getTestcase()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTestcase', []);

        return parent::getTestcase();
    }

}
